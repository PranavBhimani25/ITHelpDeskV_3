@page "/userlogins/create"
@using Microsoft.EntityFrameworkCore
@using ITHelpDeskV_3.Model
@inject IDbContextFactory<ITHelpDeskV_3.Data.ITHelpDeskV_3Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>UserLogin</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="UserLogin" OnValidSubmit="AddUserLogin" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="UserLogin.Name" class="form-control" /> 
                <ValidationMessage For="() => UserLogin.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="UserLogin.Email" class="form-control" /> 
                <ValidationMessage For="() => UserLogin.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="UserLogin.Password" class="form-control" /> 
                <ValidationMessage For="() => UserLogin.Password" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="type" class="form-label">Type:</label> 
                <InputText id="type" @bind-Value="UserLogin.Type" class="form-control" /> 
                <ValidationMessage For="() => UserLogin.Type" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/userlogins">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private UserLogin UserLogin { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUserLogin()
    {
        using var context = DbFactory.CreateDbContext();
        context.UserLogin.Add(UserLogin);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/userlogins");
    }
}
