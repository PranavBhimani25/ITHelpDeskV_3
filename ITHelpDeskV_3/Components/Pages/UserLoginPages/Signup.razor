@layout Layout.LoginAndSignupLayout
@page "/userlogins/signup"
@using Microsoft.EntityFrameworkCore
@using ITHelpDeskV_3.Model
@inject IDbContextFactory<ITHelpDeskV_3.Data.ITHelpDeskV_3Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>SignUp Page</PageTitle>
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="CSS/Login.css" rel="stylesheet" />
</head>
<body>
    <div class=" container shadow mt-5 ">

        <div class="container ">
            <h2 class="text-center">Signup Page</h2>
        </div> 

        <EditForm method="post" Model="UserLogin" OnValidSubmit="LoginCheck" FormName="create" Enhance >
        <div class="imgcontainer">
            <img src="Images/img_avatar2.png" alt="Avatar" class="avatar" style="width:200px">
        </div>
        <div class="container">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="UserLogin.Name" class="form-control container " />
                    <ValidationMessage For="() => UserLogin.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="UserLogin.Email" class="form-control" />
                    <ValidationMessage For="() => UserLogin.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="UserLogin.Password" class="form-control" />
                    <ValidationMessage For="() => UserLogin.Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    @* <InputText id="type" @bind-Value="UserLogin.Type" class="form-control" /> *@
                    <select id="type" @bind="UserLogin.Type" class="form-control">
                        <option  Value="Eng">Engineer</option>
                        <option  Value="Cust">customer</option Value="Admin">
                        <option>Admin</option>
                    </select>
                    <ValidationMessage For="() => UserLogin.Type" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Create</button>

        </div>
        </EditForm>  

        @* <div class="container2" style="background-color:#f1f1f1"> *@
        @*     <button type="button" class="cancelbtn">Cancel</button> *@
        @*     <span class="psw">Forgot <a href="#">password?</a></span> *@
        @* </div> *@

    </div>

    @if(saved){
        <script>
            alert("New User is Creted !!");
        </script>
    } 
    @if(error)
    {
        <script>
            alert("New User is not Creted !!");
        </script>
    }



</body>
</html>





@code {
    [SupplyParameterFromForm]
    private UserLogin UserLogin { get; set; } = new();

    public bool saved = false;
    public bool error = false;

    private async Task LoginCheck(){
        saved = false;
        error = false;
        try{
            using var context = DbFactory.CreateDbContext();
            context.UserLogin.Add(UserLogin);
            await context.SaveChangesAsync();
            saved = true;
        }
        catch(Exception ex ){
            error = true;
        }
    }

}
